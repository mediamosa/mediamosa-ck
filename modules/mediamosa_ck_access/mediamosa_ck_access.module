<?php
/**
 * MediaMosa is Open Source Software to build a Full Featured, Webservice
 * Oriented Media Management and Distribution platform (http://mediamosa.org)
 *
 * Copyright (C) 2012 SURFnet BV (http://www.surfnet.nl) and Kennisnet
 * (http://www.kennisnet.nl)
 *
 * MediaMosa is based on the open source Drupal platform and
 * was originally developed by Madcap BV (http://www.madcap.nl)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, you can find it at:
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 */

/**
 * @file
 * This module enables access control for frontend applications.
 */

// Access generation permission.
define('MEDIAMOSA_CK_ACCESS_PERMISSION_GENERATION', 'mediamosa_ck_access_permission_generation');

/**
 * Implements hook_menu().
 */
function mediamosa_ck_access_menu() {
  $items = array();

  $items['file/%/access'] = array(
    'title' => 'Access rules',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_mediamosa_ck_access_generate_form'),
    'access callback' => '_media_mediamosa_media_permission',
    'access arguments' => array(1, MEDIAMOSA_CK_ACCESS_PERMISSION_GENERATION),
    // Use the same setting as node module
    'theme callback' => '_node_custom_theme',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function mediamosa_ck_access_permission() {
  return array(
    MEDIAMOSA_CK_ACCESS_PERMISSION_GENERATION =>  array(
      'title' => t('Generate access for MediaMosa videos.'),
      'description' => t('Users with this permission can generate access rules for the MediaMosa Construction Kit videos.'),
    ),
  );
}

/**
 * Menu callback.
 */
function _mediamosa_ck_access_generate_form() {
  $fid = arg(1);
  $rules = array();

  // Empty form.
  $form = array();

  $media_data = MediaMosaStreamWrapper::mediamosa_parse_url_from_fid($fid);
  if ($media_data) {

    try {
      // We are in edit mode.
      $mediafile_id = $media_data['mediafile_id'];

      if ($mediafile_id) {
        $mediafile = MediaMosaCkConnectorWrapper::get_mediafile($mediafile_id);
        $user_id = (string) $mediafile->items->item->owner_id;
        $access = MediaMosaCkConnectorAccessWrapper::get_access_control($mediafile_id, $user_id);
      }
      if ($access) {
        // Go through our access.
        foreach ($access->items->item as $item) {
          if (isset($item->acl_realm)) {
            $rules[] = $item->acl_realm;
          }
          elseif (isset($item->acl_domain)) {
            $rules[] = $item->acl_domain;
          }
          elseif (isset($item->aut_realm)) {
            $rules[] = $item->aut_realm;
          }
          elseif (isset($item->aut_domain)) {
            $rules[] = $item->aut_domain;
          }
        }
      }

      sort($rules);

      $form['mediamosa_file']['access'] = array(
        '#type' => 'fieldset',
        '#title' => 'Access',
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
      );

      $form['mediamosa_file']['access']['domain_realm'] = array(
        '#type' => 'textarea',
        '#title' => t('Authorized domains and realms'),
        '#description' => t('To restrict access please enter allowed domains and realms. Each line contrains realm or domain.<br />Examples: foo.com, @bar.com'),
        '#default_value' => implode("\n", $rules),
      );

      $form['mediamosa_file']['access']['access_for_old_mediafile'] = array(
        '#type' => 'submit',
        '#value' => t('Save access rules'),
      );

      $form['#submit'][] = '_mediamosa_ck_access_generate_form_submit';
    }
    catch (Exception $e) {
      // ignore.
      $form['message']['#markup'] = t('No MediaMosa asset or mediafile was found, resync with MediaMosa.');
    }
  }

  return $form;
}

function _mediamosa_ck_access_generate_form_submit($form, &$form_state) {
  $fid = arg(1);

  // Collect the data.
  $values = $form_state['values'];

  $media_data = MediaMosaStreamWrapper::mediamosa_parse_url_from_fid($fid);

  if ($media_data) {
    // Get the asset with all the mediafiles.
    $asset_get = MediaMosaCkConnectorWrapper::get_asset($media_data['asset_id']);
    // Set the access rules to all the mediafiles.
    if (!empty($asset_get->items->item->mediafiles->mediafile) && $asset_get->items->item->mediafiles->mediafile) {
      foreach ($asset_get->items->item->mediafiles->mediafile as $mediafile_get) {
        MediaMosaCkConnectorAccessWrapper::set_access_control($mediafile_get->mediafile_id, mediamosa_ck::session_user_id(), $values['domain_realm']);
      }
    }
  }

  // Notify the user about the changes.
  drupal_set_message(t('The new access rules were applied.'));
}
