<?php
// $Id$

/**
 * MediaMosa is Open Source Software to build a Full Featured, Webservice Oriented Media Management and
 * Distribution platform (http://mediamosa.org)
 *
 * Copyright (C) 2010 SURFnet BV (http://www.surfnet.nl) and Kennisnet
 * (http://www.kennisnet.nl)
 *
 * MediaMosa is based on the open source Drupal platform and
 * was originally developed by Madcap BV (http://www.madcap.nl)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, you can find it at:
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 */

/**
 * @file
 * Embedded Video Field provider file for MediaMosa.org.
 */

// TODO: Known issue: If Caching mode is Normal or Aggressive, then the (still) tickets would be the same, and wouldn't be visible.

/**
 * Required files.
 */
require_once('media_mediamosa_helpers.inc');
require_once('media_mediamosa_connector_wrapper.inc');

/**
 * Constants.
 */

/**
 * Mediamosa main URL.
 */
define('MEDIA_MEDIAMOSA_MAIN_URL', 'http://mediamosa.org/');

/**
 * API URL.
 */
define('MEDIA_MEDIAMOSA_API_URL', 'http://mediamosa.org/api');

/**
 * Version.
 */
define('MEDIA_MEDIAMOSA_DATA_VERSION', '1.0');

/**
 * Still.
 */

// Still types.
define('MEDIA_MEDIAMOSA_STILL_TYPE_NONE', 'NONE');
define('MEDIA_MEDIAMOSA_STILL_TYPE_SECOND', 'SECOND');
define('MEDIA_MEDIAMOSA_STILL_TYPE_NORMAL', 'NORMAL');
define('MEDIA_MEDIAMOSA_STILL_TYPE_SCENE', 'SCENE');

// Still time code.
define('MEDIA_MEDIAMOSA_STILL_TIME_CODE', 10);
// Still per mediafile.
define('MEDIA_MEDIAMOSA_STILL_PER_MEDIAFILE', 3);
// Still on every second.
define('MEDIA_MEDIAMOSA_STILL_EVERY_SECOND', 5);
// Start time.
define('MEDIA_MEDIAMOSA_STILL_START_TIME', 0);
// End frame.
define('MEDIA_MEDIAMOSA_STILL_END_TIME', 9999999);
// Size.
define('MEDIA_MEDIAMOSA_STILL_SIZE', '352x288');
// H padding.
define('MEDIA_MEDIAMOSA_STILL_H_PADDING', 0);
// V padding.
define('MEDIA_MEDIAMOSA_STILL_V_PADDING', 0);

/**
 * Transcode profile.
 */
define('MEDIA_MEDIAMOSA_TRANSCODE_PROFILE_DEFAULT', 2);

/**
 * Error codes.
 */
define('ERRORCODE_STREAMING_PROFILE_NOT_FOUND', 607);
define('ERRORCODE_NOT_AUTHORIZED', 1800);

/**
 * Job.
 */
define('MEDIA_MEDIAMOSA_JOB_TYPE', 'job_type');
define('MEDIA_MEDIAMOSA_JOB_TYPE_TRANSCODE', 'TRANSCODE');
define('MEDIA_MEDIAMOSA_JOB_TYPE_STILL', 'STILL');

define('MEDIA_MEDIAMOSA_JOB_STATUS', 'status');
define('MEDIA_MEDIAMOSA_JOB_STATUS_FINISHED', 'FINISHED');
define('MEDIA_MEDIAMOSA_JOB_STATUS_FAILED', 'FAILED');
define('MEDIA_MEDIAMOSA_JOB_STATUS_WAITING', 'WAITING');

/**
 * Other constants.
 */
define('MEDIA_MEDIAMOSA_UPLOAD_TEXT', 'The file was successfully uploaded. Changes are not permanent until you save this post.');

define('MEDIA_MEDIAMOSA_PROGRESS_BAR_TIME', 2000);
define('MEDIA_MEDIAMOSA_PROGRESS_BAR_SIZE', 400);

// How much item you think you're able to update for single cron run?
define('MEDIA_MEDIAMOSA_ASSET_CQL_LIMIT', 100);

/**
 * Implementation of hook_perm().
 */
function media_mediamosa_perm() {
  // TODO: adding permission to skip transcoding?
  return array(
    'administer media mediamosa',
    'access still settings on node page',
    'access transcode settings on node page',
    'access ACL settings on node page',
  );
}

/**
 * Implementation of hook_menu().
 */
function media_mediamosa_menu() {
  return array(
    'admin/settings/media_mediamosa' => array(
      'title' => 'Media: MediaMosa',
      'description' => 'Administer the Media: MediaMosa module.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('_media_mediamosa_settings'),
      'access arguments' => array('administer media mediamosa'),
    ),
    'get_job_progress' => array(
      'title' => 'Media: MediaMosa - Get job progress',
      'page callback' => '_media_mediamosa_get_job_progress',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    ),
  );
}

/**
 * Implementation of hook_form_alter().
 */
function media_mediamosa_form_alter(&$form, &$form_state, $form_id) {
  // Node form.
  if ($form_id == $form['type']['#value'] . '_node_form') {
    if (!empty($form)) {
      foreach ($form as $key => $element) {
        // CCK field.
        _media_mediamosa_find_cck($form, $form_state, $key, $element);
      }
    }
  }

  // CCK emvideo form.
  if ($form_id == 'content_field_edit_form' && $form['#field']['type'] == 'emvideo') {
    // Node type.
    $node_type = $form['type_name']['#value'];

    // Still.
    $form['widget'] = array_merge($form['widget'], _media_mediamosa_still_settings_form($node_type));

    // Transcode profile.
    $form['widget'] = array_merge($form['widget'], _media_mediamosa_transcode_profile_settings_form($node_type));

    // Access addition.
    $form['widget'] = array_merge($form['widget'], _media_mediamosa_access_settings_form($node_type));
    $form['#validate'][] = '_media_mediamosa_access_settings_form_validate';

    // Submit.
    $form['#submit'][] = '_media_mediamosa_still_settings_submit';
    $form['#submit'][] = '_media_mediamosa_transcode_profile_settings_submit';
    $form['#submit'][] = '_media_mediamosa_access_settings_submit';
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function media_mediamosa_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'delete':
      // Delete the asset.

      // Get the asset_id.
      _media_mediamosa_get_ids_from_cck((array) $node, $asset_id);
      if ($asset_id) {
        $asset = _media_mediamosa_asset_get($asset_id);
        if ($asset) {
          $user_id = (string) $asset['owner_id'];
          _media_mediamosa_asset_delete($asset_id, $user_id);
        }
      }

      break;
    case 'insert' :
    case 'update' :
      if (isset($node->mediamosa) && isset($node->asset_id)) {
        $node_id = $node->nid;
        $asset_id = $node->asset_id;
        $user_id = _media_mediamosa_get_user_id();
        _media_mediamosa_reference_id_update($asset_id, $node_id, $user_id);
      }
      break;
  }
}

/**
 * Implementation of hook_theme().
 */
function media_mediamosa_theme() {
  return array(
    'media_mediamosa_node_form' => array(
      'arguments' => array('form' => NULL),
    ),
    'job_progress_bar' => array(
      'arguments' => array('mediafile_id' => NULL, 'node_type' => NULL, 'percen' => NULL, 'message' => NULL),
    ),
  );
}

/**
 * Implementation of hook_cron().
 */
function media_mediamosa_cron() {

  // Last run
  $time_last = variable_get('media_mediamosa_last_node_update', 0);
  $time_current = time();

  watchdog('Mediamosa CK', 'Mediamosa cron started, interval is !current - !last = !diff', array(
    '!current' => $time_current,
    '!last' => $time_last,
    '!diff' => $time_current - $time_last,
  ), WATCHDOG_DEBUG);

  $assets = _media_mediamosa_current_assets_get($time_last);

  if ($assets === FALSE) {
    // There was same kind of problem.
    watchdog('Mediamosa CK', 'Mediamosa asset get function returned an invalid response.', array(), WATCHDOG_DEBUG);
    return FALSE;
  }

  // Get (one of) MediaMosa video content type.
  $type = db_result(db_query_range("SELECT type_name FROM {content_node_field_instance} WHERE widget_module = 'emvideo' AND widget_settings LIKE '%%mediamosa%%'", 0, 1));

  if (!$type) {
    // We don't have MediaMosa content type.
    watchdog('Mediamosa CK', "We don't have MediaMosa content type.", array(), WATCHDOG_DEBUG);
    return FALSE;
  }

  watchdog('cron-sync', 'number of assets: ' . count($assets));
  // Check the response.

  foreach ($assets as $key => $asset) {
    if ($asset['is_empty_asset'] == 'TRUE') {
      watchdog('Mediamosa CK', "Ignore empty asset @asset_id.", array('@asset_id' => $asset['asset_id']), WATCHDOG_DEBUG);
      continue;
    }

    // Create / update nodes.
    $create = FALSE;

    // We store the nid in the group id value.
    // $nid = $asset['group_id']; // unwanted, we store the asset_id in the ega instead, disable for old behaviour.

    // we look for asset_id in mediafields...
    $asset_id = $asset['asset_id'];
    $nid = db_result(db_query_range("SELECT nid FROM {content_type_mediamosa_videocontent} WHERE field_mediamosa_videofile_embed = '$asset_id' ", 0, 1));

    if (!$nid) {
      // New asset without node.
      $create = TRUE;
    }
    else {
      // Load old asset with node.
      $node = node_load($nid, NULL, TRUE);
      if (!$node) {
        // There is a node ID on server but node is not exist.
        // @TODO: if needed, node creation can be inserted here.
        // How to: (1) reserve nid by direct write to {node} and {node_revision}, then update.
        watchdog('Mediamosa CK', "Can't syncronize node for asset_id = @asset_id, node @nid does not exists.",
          array('@asset_id' => $asset['asset_id'], '@nid' => $nid), WATCHDOG_DEBUG);
        continue;
      }
    }

    if ($create) {

      // Create a new node.
      $node = new stdClass();
      // Temporary title.
      @$node->title = $asset['dublin_core']['title']; // t('node has no title');
      $node->type = $type;
      $node->status = 1;
      $node->uid = 1;

      // Save the empty node.
      node_save($node);

      // Get the new node id.
      $nid = $node->nid;

      if (!$nid) {
        // Something went wrong...
        watchdog('Mediamosa CK', "Can't create node for asset_id = @asset_id.", array('@asset_id' => $asset['asset_id'],), WATCHDOG_DEBUG);
        continue;
      }

      // Set the nid in $assets array.
      // $assets[$key]['group_id'] = $nid;
      // $asset['group_id'] = $nid;
      // _media_mediamosa_reference_id_update($asset['asset_id'], $nid, $asset['owner_id']);
      // remark: old behaviour; we now use the asset_id from the client app.
    }

    // Check mostly for the case that node ID in our system occupied for other content type.
    if (!_media_mediamosa_have_mediafield($node)) {
      watchdog('Mediamosa CK', "Cannot update a node @nid, content type @type is not related to Mediamosa.", array(
          '@nid' => $nid,
          '@type' => $node->type,
        ), WATCHDOG_DEBUG);
      continue;
    }

    // Save the original node for our "media_mediamosa_node_update" hook.
    $node_original = clone $node;

    // Set the node values.
    $node->changed = time();
    $node->title = (empty($asset['dublin_core']['title']) ? t('node has no title') : $asset['dublin_core']['title']);
    $node->body = $asset['dublin_core']['description'];
    // Set the MediaMosa CCK field.
    $node = _media_mediamosa_set_mediamosa_cck_fields($node, $asset['asset_id'], empty($asset['mediafile_duration']) ? 0 : _media_mediamosa_parse_duration($asset['mediafile_duration']));

    // Save the updated node.
    node_save($node);

    // Call hook_media_mediamosa_cron().
    $response = module_invoke_all('media_mediamosa_node_update', $asset, $node_original);

  }


  // Set current time, otherwise the same items have chance to be processed again.
  variable_set('media_mediamosa_last_node_update', $time_current);

  watchdog('Mediamosa CK', 'Mediamosa cron finished. Time: @time', array(
    '@time' => $time_current,
  ), WATCHDOG_DEBUG);
}

/**
 * Implementation of hook_emfield_providers().
 */
function media_mediamosa_emfield_providers($module, $provider = NULL) {
  // We know this module only includes the main provider file, avoid needless PHP warnings.
  if ($module == 'emvideo' && (!isset($provider) || ($provider == 'mediamosa'))) {
    static $mediamosa_path;
    // Cache the result for later.
    if (!isset($mediamosa_path)) {
      $found = drupal_system_listing("mediamosa\.inc$", drupal_get_path('module', 'media_mediamosa') .'/providers/emvideo', 'name', 0);
      if (is_array($found) && !empty($found)) {
        $mediamosa_path = $found;
      }
    }
    return $mediamosa_path;
  }
}
